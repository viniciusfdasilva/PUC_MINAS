PUC-Minas - ICEI - Ciência da Computação
Arquitetura de Computadores I - Aula 14

Projeto (Síntese) de Máquinas de Estados Finitos

Contadores crescentes

1. FFD_0_1230 - Contador crescente (módulo 4)

Síncrono (evento x = entrada c + clock)

     Diagrama de estados

            c=1
c=0 |> 00 ------> 01 <| 0
        ^          |
    c=1 |          | c=1
        |          v
c=0 |> 11 <------ 10 <| 0
            c=1

  Estado        Estado
  Atual Evento Seguinte   Tabelas de Transições
  (em t)       (em t+1) 
   a  b    c     a  b       Da         Db
0  0  0    0     0  0        0          0
1  0  0    1     0  1        0          1
2  0  1    0     0  1        0          1
3  0  1    1     1  0        1          0
4  1  0    0     1  0        1          0
5  1  0    1     1  1        1          1
6  1  1    0     1  1        1          1
7  1  1    1     0  0        0          0

SoP(3,4,5,6)              SoP(1,2,5,6)

Da                        Db      
ab\c 0 1                  Db\c 0 1
00                        00     1
01     1                  01   1
11   1                    11   1
10   1 1                  10     1

Da=ac'+ab'+a'bc           Db=bc'+b'c

                                           a     b     c
                                           |     |     |
                      ----------------------     |     |
  CLK                 |                          |     |
     ------------------------                    |     |
        |  -------    |     |  -------           |     |
        | |       |   |     | |       |          |     |
        | |    Qa |---|     | |    Qb |----------+     |
        --|>      |   |     --|>      |          |     |
        --| D  Qa'|-- |     --| D  Qb'|--        |     |
        | |  1 0  | | |     | |  1 0  | |        |     |
        |  -------  | |     |  ------   |        |     |
  CLR   |      |    | |     |      |    |        |     |
     -------------------------------    |        |     |
        |           | |     |           |        |     |
        -------     | |     -------     |        |     |
  a'bc+ab'+ac'|     | |  bc'+b'c  |     |        |     |
           -------  | |        -------  |        |     |
    ------|       | | |   ----|       | |        |     |
    | ----|  >=1  | | |   |   |  >=1  | |        |     |
    | | |-|       | | |   | --|       | |        |     |
    | | |  -------  | |   | |  -------  |        |     |
    | | |           | |   | |           |        |     |
    | | |  -------  | |   | |  -------  |        |     |
    | | | |       |----   | | |       | |        |     |
    | | --|   &   |------ | --|   &   |----------+     |
    | |   |       | | | | |   |       |--------  |     |
    | |    -------  | | | |    -------  |     |  |     |
    | |             | | ----------------------+----o<|-+
    | |    -------  | |   |    -------  |        |     |
    | |   |       | | |   |   |       | |        |     |
    | ----|   &   |----   ----|   &   |--        |     |
    |     |       |------     |       |----------|-----|
    |      -------  |   |      -------  |        |     |
    |               |   -----------------        |     |
    |      -------  |                            |     |
    |     |       |--                            |     |
    ------|   &   |-------------------------------     |
          |       |-------------------------------------
           -------                                          
 

2. FFJK_0_1230 - Contador crescente módulo 4

Síncrono (evento x = entrada c + clock)

     Diagrama de estados

            c=1
c=0 |> 00 ------> 01 <| 0
        ^          |
    c=1 |          | c=1
        |          v
c=0 |> 11 <------ 10 <| 0
            c=1

OBS.:
      Cada estado (xx) será codificado por (ab),
      valores armazenados/saídas de registradores
      (flip-flops). 
      A entrada será dada pela ocorrência do 
      evento (c). 

   Entradas Saída
   em t=0
m  a  b  c   
0  0  0  0   0 <- partir de   0
1  0  0  1   1 <- contar +1 = 1
2  0  1  0   0
3  0  1  1   1 <- contar +1 = 2
4  1  0  0   0
5  1  0  1   1 <- contar +1 = 3
6  1  1  0   0
7  1  1  1   0 <- contar +1 = 0 (módulo 4)

   Estado    Estado    Transições  
   atual    seguinte   de estados
   (em t)   (em t+1) antes   depois
m  a  b  c   a  b        evento
0  0  0  0   0  0  // 00 - 0 -> 00
1  0  0  1   0  1  // 00 - 1 -> 01
2  0  1  0   0  1  // 01 - 0 -> 01
3  0  1  1   1  0  // 01 - 1 -> 10
4  1  0  0   1  0  // 10 - 0 -> 10
5  1  0  1   1  1  // 10 - 1 -> 11
6  1  1  0   1  1  // 11 - 0 -> 11
7  1  1  1   0  0  // 11 - 1 -> 00

Separar cada entrada (atual -> seguinte) para flip-flop distinto

  (t) (t+1)
m  a   a    Ja Ka
0  0   0     0  0  // hold
1  0   0     0  0  // hold            
2  0   0     0  0  // hold
3  0   1     1  0  // set             
4  1   1     0  0  // hold
5  1   1     0  0  // hold
6  1   1     0  0  // hold
7  1   0     0  1  // reset

  (t) (t+1)
m  b   b    Jb Kb
0  0   0     0  0  // hold
1  0   1     1  0  // set             
2  1   1     0  0  // hold
3  1   0     0  1  // reset
4  0   0     0  0  // hold            
5  0   1     1  0  // set
6  1   1     0  0  // hold
7  1   0     0  1  // reset

Resumo

  Estado        Estado
  Atual Evento Seguinte  Tabelas de Transições
  (em t)       (em t+1) 
m  a  b     c    a  b    Ja Ka           Jb Kb
0  0  0     0    0  0     0  0 - hold    0  0  - hold
1  0  0     1    0  1     0  0 - hold    1  0  - set
2  0  1     0    0  1     0  0 - hold    0  0  - hold
3  0  1     1    1  0     1  0 - set     0  1  - reset
4  1  0     0    1  0     0  0 - hold    0  0  - hold
5  1  0     1    1  1     0  0 - hold    1  0  - set
6  1  1     0    1  1     0  0 - hold    0  0  - hold
7  1  1     1    0  0     0  1 - reset   0  1  - reset

SoP(3)       SoP(7)       SoP(1,5)     SoP(3,7)

Ja\c 0 1     Ka\c 0 1     Jb\c 0 1     Kb\c 0 1
00           00           00     1     00
01     1     01           01           01     1
11           11     1     11           11     1
10           10           10     1     10
ab           ab           ab           ab

Ja=a'b c     Ka=a b c     Jb=  b'c     Kb=  b c

                                        a  b  c
                                        |  |  |
                      -------------------  |  |
  CLK                 |                    |  |
     ------------------------              |  |
        |  -------    |     |  -------     |  |
        | |       |   |     | |       |    |  |
      --|-| Ja Qa |---|   --|-| Jb Qb |----|  |
      | --|>      |   |   | --|>      |    |  |
      | --| Ka Qa'|-- |   | --| Kb Qb'|--  |  |
      | | |  1 0  | | |   | | |  1 0  | |  |  |
      | |  -------  | |   | |  ------   |  |  |
  CLR | |      |    | |   | |      |    |  |  |
     -------------------------------    |  |  |
      | |           | |   | |           |  |  |
      | |  -------  | |   | |  -------  |  |  |
      | | |       |-|--   | | |       | |  |  |
      | --|   &   |-|-----|-+-|   &   |-|---  |
      |   |       | |     | | |       |-|-----|
      |    -------  |     | |  -------  |     |
      |    -------  |     | |  -------  |     |
      |   |       | |     | | |       | |     |
      ----|   &   |--     --|-|   &   |--     |
          |       |---------- |       |--------
           -------             -------         


OBS.:
      Caso seja considerada a possibilidade de substituição
      de set/reset pelo uso de "toggle", o projeto pode ser 
      revisto para incluir outros termos que, eventualmente, 
      poderão levar a equações mais simples.

  Estado        Estado
  Atual Evento Seguinte  Tabelas de Transições
  (em t)       (em t+1) 
   a  b    c     a  b    Ja Ka           Jb Kb
0  0  0    0     0  0     0  0 - hold    0  0  - hold
1  0  0    1     0  1     0  0 - hold    1  1  - toggle
2  0  1    0     0  1     0  0 - hold    0  0  - hold
3  0  1    1     1  0     1  1 - toggle  1  1  - toggle
4  1  0    0     1  0     0  0 - hold    0  0  - hold
5  1  0    1     1  1     0  0 - hold    1  1  - toggle
6  1  1    0     1  1     0  0 - hold    0  0  - hold
7  1 1     1     0  0     1  1 - toggle  1  1  - toggle

SoP(3,7)     SoP(3,7)     SoP(1,3,5,7) SoP(1,3,5,7)

Ja           Ka           Jb           Kb      
ab\c 0 1     ab\c 0 1     ab\c 0 1     ab\c 0 1
00           00           00     1     00     1
01     1     01     1     01     1     01     1
11     1     11     1     11     1     11     1
10           10           10     1     10     1

Ja= b c      Ka= b c      Jb= c        Kb= c


Assíncrono (evento x = entrada c = controle)

     Diagrama de estados

            c=1
c=0 |> 00 ------> 01 <| 0
        ^          |
    c=1 |          | c=1
        |          v
c=0 |> 11 <------ 00 <| 0
            c=1

  Estado        Estado
  Atual Evento Seguinte  Tabelas de Transições
  (em t)       (em t+1) 
   a  b    c     a  b    Ja Ka           ca  cb   Jb Kb
0  0  0    0     0  0     1  1 - toggle   0   0    1  1  - toggle
1  0  0    1     0  1     1  1 - toggle   0   1    1  1  - toggle
2  0  1    0  -> 0  1 <-  1  1 - toggle   0   0    1  1  - toggle
3  0  1    1  -> 1  0 <-  1  1 - toggle   1   1    1  1  - toggle
4  1  0    0     1  0     1  1 - toggle   0   0    1  1  - toggle
5  1  0    1     1  1     1  1 - toggle   0   1    1  1  - toggle
6  1  1    0  -> 1  1 <-  1  1 - toggle   0   0    1  1  - toggle
7  1  1    1  -> 0  0 <-  1  1 - toggle   1   1    1  1  - toggle

OBS.: O FF_JK(a) deverá fazer a troca ("toogle")
      quando o FF_JK(b) fizer a troca de 1->0,
      ou seja, quando a saída b = 0 (Qb' = 1).
      Portanto, se ambos os FF_JK estão em modo
      de troca ("toogle"), o FF_JK(a) deverá
      receber como entrada de clock o sinal
      Qb' do FF_JK(b).

                                         a  b  c
    1 ----------------------             |  |  |
       |               ----|--------------  |  |
       | --------------|---|--------------  |  |
       | |             |   | ------------|--|--| x=c
       | |  -------    |   | |  -------  |  |  |
       | | |       |   |   | | |       | |  |  |
       |-|-| Ja Qa |----   |-|-| Jb Qb |-|--|  |
       | --|>      |       | --|>      | |  |  |
       ----| Ka Qa'|       ----| Kb Qb'|--  |  |
           |  1 0  |           |  1 0  |    |  |
            -------             ------      |  |
  CLR          |                    |       |  |
      -------------------------------       |  |



3. FFT_0_1230 - Contador crescente (módulo 4)

Síncrono (evento x = entrada c + clock)

     Diagrama de estados

            c=1
c=0 |> 00 ------> 01 <| 0
        ^          |
    c=1 |          | c=1
        |          v
c=0 |> 11 <------ 10 <| 0
            c=1

  Estado        Estado
  Atual Evento Seguinte     Tabelas de Transições
  (em t)       (em t+1) 
   a  b    c     a  b       Ta         Tb
0  0  0    0     0  0        0 - hold   0 - hold
1  0  0    1     0  1        0 - hold   1 - toogle
2  0  1    0     0  1        0 - hold   0 - hold
3  0  1    1     1  0        1 - toogle 1 - toogle
4  1  0    0     1  0        0 - hold   0 - hold
5  1  0    1     1  1        0 - hold   1 - toogle
6  1  1    0     1  1        0 - hold   0 - hold
7  1  1    1     0  0        1 - toogle 1 - toogle

SoP(3,7)                  SoP(1,3,5,7)

Ta                        Tb      
ab\c 0 1                  ab\c 0 1
00                        00     1
01     1                  01     1
11     1                  11     1
10                        10     1

Ta= b c                   Tb = c


4. FFSR_0_1230 - Contador crescente (módulo 4)

Síncrono (evento x = entrada c + clock)

     Diagrama de estados

            c=1
c=0 |> 00 ------> 01 <| 0
        ^          |
    c=1 |          | c=1
        |          v
c=0 |> 11 <------ 10 <| 0
            c=1

  Estado        Estado
  Atual Evento Seguinte  Tabelas de Transições
  (em t)       (em t+1) 
   a  b    c     a  b    Sa Ra         Sb Rb
0  0  0    0     0  0     0  0 - hold  0  0  - hold
1  0  0    1     0  1     0  0 - hold  1  0  - set
2  0  1    0     0  1     0  0 - hold  0  0  - hold
3  0  1    1     1  0     1  0 - set   0  1  - reset
4  1  0    0     1  0     0  0 - hold  0  0  - hold
5  1  0    1     1  1     0  0 - hold  1  0  - set
6  1  1    0     1  1     0  0 - hold  0  0  - hold
7  1  1    1     0  0     0  1 - reset 0  1  - reset

SoP(3)       SoP(7)       SoP(1,3)     SoP(3,7)

Sa           Ra           Sb           Rb      
ab\c 0 1     ab\c 0 1     ab\c 0 1     ab\c 0 1
00           00           00     1     00
01     1     01           01           01     1
11           11     1     11           11     1
10           10           10     1     10      

Sa=a'b c     Ra=a b c     Sb=  b'c     Rb=  b c



Contadores decrescentes

5. FFJK_0_3210 - Contador decrescente (módulo 4)

Síncrono (evento x = entrada c + clock)

     Diagrama de estados

            c=1
c=0 |> 00 <------ 01 <| 0
        |          ^
    c=1 |          | c=1
        v          |
c=0 |> 11 ------> 10 <| 0
            c=1

  Estado        Estado
  Atual Evento Seguinte  Tabelas de Transições
  (em t)       (em t+1) 
   a  b    c     a  b    Ja Ka        Jb Kb
0  0  0    0     0  0     0  0 - hold  0  0  - hold
1  0  0    1     1  1     1  0 - set   1  0  - set
2  0  1    0     0  1     0  0 - hold  0  0  - hold
3  0  1    1     0  0     0  0 - hold  0  1  - reset
4  1  0    0     1  0     0  0 - hold  0  0  - hold
5  1  0    1     0  1     0  1 - reset 1  0  - set
6  1  1    0     1  1     0  0 - hold  0  0  - hold
7  1  1    1     1  0     0  0 - hold  0  1  - reset

SoP(1)       SoP(5)       SoP(1,5)     SoP(3,7)

Ja           Ka           Jb           Kb      
ab\c 0 1     ab\c 0 1     ab\c 0 1     ab\c 0 1
00     1     00           00     1     00
01           01           01           01     1
11           11           11           11     1
10           10     1     10     1     10      

Ja=a'b'c     Ka= ab'c     Jb=b'c       Kb=  b c

Assíncrono (evento x = c = controle)

     Diagrama de estados

            c=1
c=0 |> 00 <------ 01 <| 0
        |          ^
    c=1 |          | c=1
        v          |
c=0 |> 11 ------> 10 <| 0
            c=1

  Estado        Estado
  Atual Evento Seguinte  Tabelas de Transições
  (em t)       (em t+1) 
   a  b    c     a  b    Ja Ka           ca  cb   Jb Kb
0  0  0    0     0  0     1  1 - toggle   0   0    1  1  - toggle
1  0  0    1  -> 1  1 <-  1  1 - toggle   1   1    1  1  - toggle
2  0  1    0     0  1     1  1 - toggle   0   0    1  1  - toggle
3  0  1    1  -> 0  0 <-  1  1 - toggle   0   1    1  1  - toggle
4  1  0    0     1  0     1  1 - toggle   0   0    1  1  - toggle
5  1  0    1  -> 0  1 <-  1  1 - toggle   1   1    1  1  - toggle
6  1  1    0     1  1     1  1 - toggle   0   0    1  1  - toggle
7  1  1    1  -> 0  0 <-  1  1 - toggle   1   1    1  1  - toggle

OBS.: O FF_JK(a) deverá fazer a troca ("toogle")
      quando o FF_JK(b) fizer a troca de 0->1,
      ou seja, quando a saída b = 1 (Qb' = 0).
      Portanto, se ambos os FF_JK estão em modo
      de troca ("toogle"), o FF_JK(a) deverá
      receber como entrada de clock o sinal
      Qb do FF_JK(b).

                                         a  b  c
    1 ----------------------             |  |  |
       |               ----|--------------  |  |
       | --------------|---|--------------  |  |
       | |             |   | ------------|--|--| x=c
       | |  -------    |   | |  -------  |  |  |
       | | |       |   |   | | |       | |  |  |
       |-|-| Ja Qa |----   |-|-| Jb Qb |----|  |
       | --|>      |       | --|>      |    |  |
       ----| Ka Qa'|       |---| Kb Qb'|    |  |
           |  1 0  |           |  1 0  |    |  |
            -------             ------      |  |
  CLR          |                    |       |  |
      -------------------------------       |  |

