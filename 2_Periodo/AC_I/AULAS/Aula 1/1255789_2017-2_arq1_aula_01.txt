PUC-Minas - ICEI - Ciência da Computação
Arquitetura de Computadores I - Aula 01

Tema: Sistemas de numeração

1. Definições
                                  *         +
   programa ::= classe { atributos , métodos }

   Um programa pode ser definido por 
   um conjunto de especifiações expressas por
   uma classe que pode possuir 
   zero ou mais atributos e
   um ou mais métodos.

   Obs.: Se considerar que toda a classe deve
         possuir pelo menos um método _ 
         o construtor padrão.

   As representações de dados dependem da capacidade
   em expressar guardar quantidades.

                                  +        +
   quantidade ::= número { dígitos , regras }

   Uma quantidade pode ser definida por um número
   que pode possuir um ou mais dígitos e
   uma ou mais regras para composição.

   número ::= dígito
                           *
            | dígito dígito   // derivação à direita  
                                 (Big Endian) 
                    *      
            | dígito dígito   // derivação à esquerda 
                                 (Little Endian) 

   Um número pode ser definido por um dígito;
   ou por uma sequência de dígitos iniciada 
   por um dígito (o menos significativo) 
   e seguida por outros dígitos a sua direita
   (arranjo de algarimos, por exemplo);
   ou por uma sequência de dígitos encerrada por um dígito
   (o menos significativo), notação comumente utilizada.
   
   dígito ::= '0' | '1' | ...

   Um dígito pode ser definido por um algarismo (símbolo)
   '0' que expressa a inexistência de quantidade, ou
   '1' que expressa a existência de quantidade, ou
   outros símbolos que indiquem certas quantidades.

   Obs.: Um símbolo é uma representação 
         à qual se atribui um significado e pertence 
         a um conjunto finito de representações 
         (alfabeto).

2. Representações de dados

          23          -> decimal     (base 10)
        10111         -> binário     (base  2)
         113          -> quaternário (base  4)
          27          -> octal       (base  8)
          17          -> hexadecimal (base 16)

      0001 0111       -> binário em 1 byte   

         "23"         -> caracteres
    '2'        '3'    -> algarismos
    50         51     -> código      (ASCII)
0011  0010 0011  0011 -> bytes binários equivalentes


   OBS.: Agrupamentos de potências

0011 0001  0011  0011    -> binário     (base  2)
   3    1     3     3    -> hexadecimal (base 16)
                            (1 grupo de 4 bits = 1 dígito hexadecimal)
                            Dígitos hexadecimais: {0,1,2,3,4,5,6,7,8,9A,B,C,D,E,F}

0 011 000 100 110 011    -> binário     (base  2)
    3   0   4   6   3    -> octal       (base  8)
                            (1 grupo de 3 bits = 1 dígito octal)
                            Dígitos octais: {0,1,2,3,4,5,6,7}

00 11 00 01  00 11 00 11 -> binário     (base  2)
 0  3  0  1   0  3  0  3 -> quaternário (base  4)
                            (1 grupo de 2 bits = 1 dígito quaternário)
                            Dígitos quaternários: {0,1,2,3}


3. Notação posicional -> Forma canônica

   A regra de significância (valor) de um número 
   pode ser expressa de forma compacta pela
   notação Epsilon para indicar somas sucessivas

                  n-1         k
   número       =  E  a * base   
         (base)   k=0  k 

   ou o somatório de certa quantidade expressa por um 
   algarismo (a, índice k) multiplicada por outra quantidade
   expressa pelo valor da base do sistema de numeração
   elevada à uma potência indicada pelo mesmo índice k.

   Exemplos:
                         1       0
            13     = 1*10  + 3*10 
              (10)
                        3     2      1      0
            1101   = 1*2 + 1*2  + 0*2  + 1*2
                (2) 
                        1      0
            31     = 3*4  + 1*4 
              (4)
                        1      0
            15     = 1*8  + 5*8 
              (8)
                         1          0
            0D     = 0*16  + (13)*16 
              (16)

   Por simplificação, as bases poderão ser omitidas
   se houver especificação clara e prévia do sistema
   que representam.

   Exemplos:
            13   = 0d13   // 0d = decimal
            1101 = 0b1101 // 0b = binário 
            31   = 0q31   // 0q = quaternário
            15   = 0o15   // 0o = octal
            0D   = 0H0D   // 0H = hexadecimal maiúsculo
            0d   = 0h0d   // 0h = hexadecimal minúsculo
            0x   = 0x0d   // 0x = hexadecimal alternativo
 
4. Funções

   Uma função pode ser definida por uma relação que
   mapeia certo valor pertencente a determinado domínio
   em outro(s) valor(es) pertencente(s) a outro domínio.

   Essa relação pode ser expressa

   por uma notação matemática

   saída   função entrada
     y   =   f     ( x )

   ou por tuplas

   (f, x, y) = mapeamento (f) que recebe (x) e produz (y)
   ou
   (f, y, x) = mapeamento (f) que produz (y) dado (x)

   ou por uma notação algorítmica de uma linguagem de programação

   int f ( int x ) // função identidade sobre o dominio dos inteiros
   {
     int y = x;
     return ( y );
   } // fim função

   ou pela descrição de um módulo funcional

   module f ( output y, input x );
    assign y = x;                  // relação permanente 
   endmodule // f

   ou por uma representação de circuito 
   que processa sinais de entrada e de saída

   entrada  processamento  saída
    ---          ---         ---
   | x | -----> | f | ----> | y |  // circuito combinacional
    ---          ---         ---

   entrada  processamento  saída
    ---          ---         ---
   | x | -----> | f | ----> | y |  // circuito sequencial
   |  t|  ----> |   |       |  t|   
    ---   |      ---         ---
          |                   |
          |      ---          |
          ----- | f | <--------    // realimentação             
                |  r|          
                 ---           

5. Conversão entre bases de sistemas de numeração

   A conversão entre bases de sistemas de numeração 
   pode ser indicada por uma função que recebe 
   como entrada um valor (x) em certa base (b1)
   e produz como saída o equivalente (y) na base (b2).
   
    -----        -----------        -----
   | x   | ---> | conversor | ---> | y   |
   |  b1 |      | b1 -> b2  |      |  b2 |
    -----        -----------        -----

Exemplo 1:
               1         0
 23    = 2 x 10  + 3 x 10  (notação posicional -> forma canônica)
   (10)                    (completa,     com todas as potências)
            1     0
 23    = 2x5 + 3x5    = 10 + 3 = 13
   ( 5)                            (10)
            1     0
 23    = 2x8 + 3x8    = 16 + 3 = 19
   ( 8)                            (10)


10111   = [0]1 01 11  <- (formar grupos de 2 da direita para esquerda)
     (2)
        =    1  1  3 
                    (4)
 
            2    1    0
 23     = 1x4 +1x4 +3x4    = 23
   (10)               (4)


10111   = [0]10 111   <- (formar grupos de 3 da direita para esquerda)
     (2)
        =     2   7
                   (8)

             1    0
 23     = 2x8 +7x8     = 27
   (10)                   (8)


10111   = [000]1 0111 <- (formar grupos de 4 da direita para esquerda)
     (2)

 23     = D           <- "dígito 13"
   (10)    (16)


            3    2    1    0
1101   = 1x2 +1x2 +0x2 +1x2  = 8+4+0+1 = 13
    (2)


OBS.:

1101   = 1101         <- (formar grupos de 4 da direita para esquerda)
    (2)

  13   = D            <- "dígito 13"
   (10)   (16)


            3    2    1    0
1101   = 1x2 +1x2 +0x2 +1x2  = 8+4+0+1 = 13
    (2)

0000 1101   = 13 em 1 byte
         (2)

0000 0000 0000 0000 0000 0000 0000 1101   = 13 em inteiro de 32 bits


Exemplo 2:
                  7    6    5    4      3    2    1    0
0011 0001    = 0x2 +0x2 +1x2 +1x2 +  0x2 +0x2 +0x2 +1x2
         (2)
             =  0  + 0  + 32 + 16 +   0  + 0  + 0  +  1 = 49

                  3    2    1    0
0301         = 0x4 +3x4 +0x4 +1x4
    (4)
             =  0  +3x16 + 0 + 1 = 49

                  1    0
61           = 6x8 +1x8
  (8)
             = 6x8 + 1 = 49

                   1     0
31           = 3x16 +1x16
  (16)
             =   48 +   1 = 49

      
6. Métodos para conversões (Matemática)

Parte inteira

Exemplo 1:

23    = X
  (10)   (2)
      = (23-16) -> (7-8) -> (7-4) -> (3-2) -> (1-1) = 0 <- (parar==0)

      =     16  +     0  +     4  +     2  +    1

             4                 2        1       0
      =     2   +     0  +    2   +    2   +   2

             4        3        2       1        0
      =   1x2   +  0x2   +  1x2   +  1x2   + 1x2

      
      =   1        0        1        1       1
      
      =   10111
               (2)
 
        quociente resto
23 / 2 = 11      + 1     quinto   dígito
11 / 2 =  5      + 1     quarto   dígito
 5 / 2 =  2      + 1     terceiro dígito
 2 / 2 =  1      + 0     segundo  dígito
 1 / 2 =  0      + 1     primeiro dígito
       =  10111
               (2)
23 / 8 =  2      + 7
 7 / 8 =  0      + 7
       =  27
            (8)
                  
 23 / 4 = 5      + 3
  5 / 4 = 1      + 1
  1 / 4 = 0      + 1
        = 113
             (4)

Exemplo 2:

          quociente  resto
115 / 2 =    57x2  + 1
 57 / 2 =    28x2  + 1
 28 / 2 =    14x2  + 0
 14 / 2 =     7x2  + 0
  7 / 2 =     3x2  + 1
  3 / 2 =     1x2  + 1
  1 / 2 =     0x2  + 1

(normal)  (invertido)
1100111 ->  1110011   = 115
                   (2)     (10)

Exemplo 3:

115 |   1            
115 |   1*2 =  2     (115 <=   1? 0)
115 |   2*2 =  4     (115 <=   2? 0)
115 |   4*2 =  8     (115 <=   4? 0)
115 |   8*2 =  16    (115 <=   8? 0)
115 |  16*2 =  32    (115 <=  16? 0)
115 |  32*2 =  64    (115 <=  32? 0)
115 |  64*2 = 128    (115 <=  64? 0)
115 | 128            (115 <= 128? 1 = parar)


115     = 115-64 = 51           -> 1 (    é possível subtrair = 1)
   (10) =  51-32 = 19           -> 1
        =  19-16 =  3           -> 1
        =   3- 8 =  3           -> 0 (não é possível subtrair = 0)
        =   3- 4 =  3           -> 0
        =   3- 2 =  1           -> 1
        =   1- 1 =  0 (= parar) -> 1

1110011          = 115
       (2)            (10)


Exemplo 4:

1110011   = 01 11 00 11        <- (formar grupos de 2 para a esquerda)
       (2)             (2)
                                    3    2    1    0
          =  1  3  0  3        = 1x4 +3x4 +0x4 +3x4
                       (4)
                               =  64 +3x16+ 0  +3
                        
                               =  115
                                     (10)

1110011   = [0]01 110 011      <- (formar grupos de 3 para a esquerda)
       (2)               (2)
                                    2    1    0
          =     1   6   3      = 1x8 +6x8 +3x8
                         (8)
                               =  64 + 48 + 3
                        
                               =  115
                                     (10)

1110011   = 0111 0011          <- (formar grupos de 4  para a esquerda)
       (2)           (2)
                                     1     0
          =    7    3          = 7x16 +3x16
                     (16)
                               =  112 + 3
                        
                               =  115
                                     (10)

Exemplo 5:

1110011   = X
       (2)   (10)

  |   1      1      1     0       0     1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |      |      |      |      |      |      | /1
   
  |   1      1      1     0       0     1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |      |      |      |      |      | /1
   
  |   1      1      1     0      0      1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |      |      |      |      | /1

  |   1      1      1     0      0      1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |      |      |      | /1

  |   1      1      1     0      0      1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |2*14+0|      |      | /1

  |   1      1      1     0      0      1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |2*14+0|2*28+1|      | /1

  |   1      1      1     0      0      1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |2*14+0|2*28+1|2*57+1| /1

  |   1      1      1     0      0      1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |2*14+0|2*28+1|2*57+1| = 115/1


Parte fracionária

Exemplo 1:

0,5625    = X         = 0,_____
      (10)   (2)               (2)

0,5625                = 0,1____
     2x
______
1,1250    = 1+0,1250

0,1250                = 0,10___
     2x
______
0,2500

0,2500                = 0,100__
     2x
______
0,5000

0,5000                = 0,1001
     2x                       (2)
______
1,0000   = 1+0,000 <- (parar==0)


              0    (-1)    (-2)    (-3)    (-4)
0,1001   = 0x2 +1x2    +0x2    +0x2    +1x2
      (2)
         =  0  +1/2    + 0     + 0     +1/16

         =      0,5                    +0,0625

         =  0,5625
                  (10)

Por agrupamentos:

0, 10 01      <- (formar grupos de 2 da vírgula para a direita)
        (2)
                    1    0           2
0,  2  1      -> 2x4 +1x4 = 9  -> 9/4  = 9/16 = 0,5625
        (4)                                           (10)

0,     9      -> 9/16 = 0,5625
        (16)                  (10)

0, 100 100        (-1)    (-2)      1    0     2
0,   4   4   = 4x8    +4x8    = [4x8 +4x8 ] / 8  = 36/64 = 0,5625
          (8)                                                    (10)

Exemplo 2:

0,2      = X
   (10)     (2)

0,2               = 0,______
0,2 x 2 = 0,40    = 0,0_____
0,4 x 2 = 0,80    = 0,00____
0,8 x 2 = 1,60    = 0,001___
0,6 x 2 = 1,20    = 0,0011__
0,2 

0, 0011 0011 0011...        <- dízima periódica
                    (2)

Por agrupamentos:

0, 00 11 00 11 00 11 ...
                        (2)

0,  0  3  0  3  0  3 ...       (formar grupos de 2 para a direita)
                        (4)

0,     3     3     3 ...       (formar grupos de 2 para a direita)
                        (16)

0, 001 100 110 011   ...       (formar grupos de 3 para a direita)
                        (2)
0,   1   4   6   3   ...
                        (8)

Exemplo 3:

111,0011   = X
        (2)   (10)

  |   1      1      1 ,|  0       0     1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |      |      |      |      |      |      | /1

  |   1      1      1 ,|  0       0     1      1   |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |      |      |      |      |      | /1
  
  |   1      1      1 ,|   0      0      1      1  |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |      |      |      |      | /1
  
  |   1      1      1 ,|   0      0      1      1  |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |      |      |      | /(1*2)

  |   1      1      1 ,|   0      0      1      1  |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |2*14+0|      |      | /(2*2)

  |   1      1      1 ,|   0      0      1      1  |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |2*14+0|2*28+1|      | /(4*2)

  |   1      1      1 ,|   0      0      1      1  |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |2*14+0|2*28+1|2*57+1| /(8*2)

  |   1      1      1 ,|   0      0      1      1  |
  |______|______|______|______|______|______|______| 
2*|   1  |2*1+1 |2*3+1 |2*7+0 |2*14+0|2*28+1|2*57+1| = 115 / 16 = 7,1875



Método alternativo (parte inteira + parte fracionária)

Exemplo 1:

   13,625    = X
         (10)   (2)

   Valor atual  Potência de 2   (inicial =   1)
   13,625              1 =  1   (13,625 >=   1 ? V -> dobrar)
   13,625            1*2 =  2   (13,625 >=   2 ? V -> dobrar)
   13,625            2*2 =  4   (13,625 >=   4 ? V -> dobrar)
   13,625            4*2 =  8   (13,625 >=   8 ? V -> dobrar)
   13,625            8*2 = 16   (13,625 >=  16 ? F -> parar )
                                                             // pré-condição
   Valor atual  Potência de 2  Pode subtrair?  Próximo valor
   13,625             16          0            13,625 (menor -> manter  )
   13,625              8          1             5,625 (maior -> subtrair)
    5,625              4          1             1,625 (maior -> subtrair)
    1,625              2          0             1,625 (maior -> manter  )
    1,625              1          1 ,           0,625 (menor que 1, vírgula)
    0,625              0,5        1             0,125 (maior -> subtrair)
    0,125              0,25       0             0,125 (menor -> manter  )
    0,125              0,125      1             0,000 (igual -> subtrair)
                                                      (parar)
                                                             // pós-condição

   na ordem direta das respostas: 01101,101   = 13,625
                                           (2)        (10)

               4    3    2    1    0    -1    -2    -3
   13,625 = 0x2 +1x2 +1x2 +0x2 +1x2 +1x2  +0x2  +1x2   = (0+8+4+2+1)+(1/2+0/4+1/8)

   Y      = 01101,101
    (2)              (2)

Exemplo 2:

23,5625    = Y
       (10)   (2)

Valor atual  Potência de 2   (inicial =   1)
23,5625             1 =  1   (23,5625 >=   1 ? V -> dobrar)
23,5625           1*2 =  2   (23,5625 >=   2 ? V -> dobrar)
23,5625           2*2 =  4   (23,5625 >=   4 ? V -> dobrar)
23,5625           4*2 =  8   (23,5625 >=   8 ? V -> dobrar)
23,5625           8*2 = 16   (23,5625 >=  16 ? V -> dobrar)
23,5625           8*2 = 32   (23,5625  <  32 ? F -> parar )

Valor atual  Potência de 2  Pode subtrair?  Próximo valor
23,5625            32          0            23,5625 (menor -> manter  )
23,5625            16          1             7,5625 (maior -> subtrair)
 7,5625             8          0             7,5625 (menor -> manter  )
 7,5625             4          1             3,5625 (maior -> subtrair)
 3,5625             2          1             1,5625 (maior -> subtrair)
 1,5625             1          1 ,           0,5625 (menor que 1, vírgula)
 0,5625             0,5        1             0,0625 (maior -> subtrair)
 0,0625             0,25       0             0,0625 (menor -> manter  )
 0,0625             0,125      0             0,0625 (menor -> manter  )
 0,0625             0,0625     1             0,0000 (igual -> subtrair)
                                                    (parar)

na ordem direta das respostas: 010111,1001   = 23,5625
                                          (2)        (10)

               4    3    2    1    0    -1    -2    -3
   23,625 = 1x2 +0x2 +1x2 +1x2 +1x2 +1x2  +0x2  +1x2   = (16+0+4+2+1)+(1/2+0/4+1/8)

   Y      = 010111,1001
    (2)               (2)


Conversões entre bases potências de 2

Exemplo 1:

13.625    = 01101,101
     (10)             (2)

               4     3     2     1     0     -1     -2     -3
          = 0*2 + 1*2 + 1*2 + 0*2 + 1*2 + 1*2  + 0*2  + 1*2

   
Agrupamentos:
                     <--- , --->
01101,101    =  [11] [01] , [10] [10]   
         (2)                         (2)
             =    3    1  ,   2    2    <- grupos de 2
                                     (4)
                         <--- , --->
             =  [_ _ 1] [101] , [101]   

             =       1     5  ,    5    <- grupos de 3
                                     (8)
                   <--- , --->
             =   [1101] , [1010]        

             =       D  ,     A         <- grupos de 4
                                    (16)

             Obs.: Convenção para algarismos base 16
                   { A = 1010 = 10, 
                     B = 1011 = 11, 
                     C = 1100 = 12, 
                     D = 1101 = 13, 
                     E = 1110 = 14, 
                     F = 1111 = 15 }

Exemplo 2:

23.5625      = 10111,1001
       (10)              (2)

Agrupamentos:
                         <--- , --->
10111,1001   = [_ _ _1][0111] , [1001]
          (2)  
             = [0001]  [0111] , [1001]    
             
             =     1       7  ,     9     <- grupos de 4
                                     (16)
             
               Obs.: Convenção para algarismos base 16
                   { A=10, B=11, C=12, D=13, E=14, F=15 }

                     <--- , --->
10111,1001   = [_ 10][111] , [100][1 _ _] 
          (2)
             = [010] [111] , [100][100]    

             =    2     7  ,    4    4    <- grupos de 3
                                      (8)

                      <--- , --->
10111,1001   = [_1][01][11] , [10][01] 
          (2)                          
             = [01][01][11] , [10][01]   

             =   1   1   3  ,   2   1     <- grupos de 2
                                      (4)

Desagrupamentos:

13,4B      = [1][3] , [4][B] = [0001][0011] , [0100][1011] = 00010011,01001011
     (16)                                                                     (2)

 7,32      = [7] , [3][2]    = [111] , [011][010] = 111,011010
     (8)                                                      (2)

 0,31      = 0, [3][1]       = 0, [11][01] = 0,1101
     (4)                                           (2)


Representação de ínoutros tipos de dados

  Símbolos (letras, algarismos, operadores, delimitadores, pontuação ...)

  Códigos

  EBCDIC  ->  8 bits
  ASCII   ->  8 bits (7 bits + extensão, como no caso da língua portuguesa)
  Unicode -> 16 bits

  Os 128 primeiros símbolos ASCII e UNICODE são equivalentes.

  Exemplos:
  'A' = 65    = 41    = 0100 0001
          (10)    (16)           (2)
  'a' = 97    = 61    = 0110 0001
          (10)    (16)           (2)
  '0' = 48    = 30    = 0011 0000
          (10)    (16)           (2)
